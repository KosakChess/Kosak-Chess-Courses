datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

enum Role {
  ADMIN
  STUDENT
}

enum Locale {
  en
  pl
}

enum Currency {
  USD
  PLN
}

model User {
  id        String   @id @default(uuid())
  clerkId   String   @unique
  email     String?  @unique
  name      String?
  image     String?
  role      Role     @default(STUDENT)

  purchases Purchase[]
  reviews   Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Course {
  id            String         @id @default(uuid())
  slug          String         @unique
  imageUrl      String?        @db.Text
  isPublished   Boolean        @default(false)
  minElo        Int            @default(0)
  maxElo        Int            @default(3000)

  categoryId    String?
  category      Category?      @relation(fields: [categoryId], references: [id])

  chapters      Chapter[]
  reviews       Review[]
  purchases     Purchase[]
  translations  CourseTranslation[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt()

  @@index([categoryId])
}

model CourseTranslation {
  id          String   @id @default(uuid())
  locale      Locale
  title       String
  description String?  @db.Text
  price       Int      @default(0) 
  currency    Currency @default(USD)

  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  @@unique([courseId, locale])
}

model Category {
  id            String               @id @default(uuid())
  slug          String               @unique
  courses       Course[]
  translations  CategoryTranslation[]
}

model CategoryTranslation {
  id         String   @id @default(uuid())
  locale     Locale
  name       String

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@unique([categoryId, locale])
}

model Chapter {
  id            String               @id @default(uuid())
  courseId      String
  course        Course               @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons       Lesson[] 
  isPublished   Boolean              @default(false)
  isFree        Boolean              @default(false)
  translations  ChapterTranslation[]

  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt()

  @@index([courseId])
}

model ChapterTranslation {
  id         String   @id @default(uuid())
  locale     Locale
  title      String

  chapterId  String
  chapter    Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@unique([chapterId, locale])
}

model Lesson {
  id            String               @id @default(uuid())
  videoUrl      String?              @db.Text
  chessPuzzle   String?              @db.Text
  chapterId     String
  chapter       Chapter              @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  duration      Int?                 @default(0)
  isPublished   Boolean              @default(false)
  translations  LessonTranslation[]
  userProgress  UserProgress[]

  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt()

  @@index([chapterId])
}

model LessonTranslation {
  id          String   @id @default(uuid())
  locale      Locale
  title       String
  captionsUrl String?  @db.Text

  lessonId    String
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@unique([lessonId, locale])
}

model UserProgress {
  id          String   @id @default(uuid())
  userId      String
  lessonId    String
  isCompleted Boolean  @default(false)

  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@index([lessonId])
  @@unique([userId, lessonId])
}

model Review {
  id        String   @id @default(uuid())
  content   String   @db.Text
  rating    Int      @default(1)

  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  parentReviewId String?
  parentReview   Review? @relation("ReviewToReply", fields: [parentReviewId], references: [id])
  replies        Review[] @relation("ReviewToReply")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([courseId])
  @@index([userId])
}

model Purchase {
  id        String   @id @default(uuid())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([courseId])
  @@unique([userId, courseId])
}

model StripeCustomer {
  id                String   @id @default(uuid())
  userId            String
  stripeCustomerId  String

  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())

  @@unique([userId, stripeCustomerId])
}
